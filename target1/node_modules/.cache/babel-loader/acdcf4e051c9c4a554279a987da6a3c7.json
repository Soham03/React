{"ast":null,"code":"var _jsxFileName = \"/Users/Soham/target1/src/Components/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm(); // const submit=submission=>console.log(submission);\n\n  function handleEmail(event) {\n    event.preventDefault();\n    let value1 = event.target.value;\n    return setEmail(value1);\n  }\n\n  function handlePassword(event) {\n    event.preventDefault();\n    let value2 = event.target.value;\n    return setPassword(value2);\n  }\n\n  function handleClick() {\n    let finalEmail = email;\n    let finalPassword = password;\n    let storedemail = JSON.parse(localStorage.getItem(\"email\"));\n    let storedpassword = JSON.parse(localStorage.getItem(\"password\"));\n\n    if (finalEmail === storedemail && finalPassword === storedpassword) {\n      localStorage.setItem(\"isLoggedIn\", JSON.stringify(1));\n      window.location.reload();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ...register('email', {\n          required: {\n            value: true,\n            message: \"Enter a email address\"\n          },\n          pattern: {\n            value: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n            message: \"Invalid email address\"\n          }\n        }),\n        onChange: handleEmail,\n        placeholder: \"Enter your email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        ...register('password', {\n          required: {\n            value: true,\n            message: \"Enter a password\"\n          },\n          minLength: {\n            value: 8,\n            message: \"Length should be of min 8 characters \"\n          },\n          validate: value => {\n            return [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every(pattern => pattern.test(value)) || \"Password must include lower, upper, number, and special chars\";\n          }\n        }),\n        onChange: handlePassword,\n        placeholder: \"Enter your password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), errors.password && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: handleSubmit(handleClick),\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Login, \"QAOBbJDCjxS+LflqtGWwvU2eKqQ=\", false, function () {\n  return [useForm];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/Soham/target1/src/Components/Login.jsx"],"names":["React","useState","useForm","Login","email","setEmail","password","setPassword","register","handleSubmit","formState","errors","handleEmail","event","preventDefault","value1","target","value","handlePassword","value2","handleClick","finalEmail","finalPassword","storedemail","JSON","parse","localStorage","getItem","storedpassword","setItem","stringify","window","location","reload","required","message","pattern","minLength","validate","every","test"],"mappings":"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","sourcesContent":["import React,{useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n\nfunction Login()\n{\n    \n    const [email,setEmail]=useState(\"\");\n    const [password,setPassword]=useState(\"\");\n\n    const{register,handleSubmit,formState:{errors}}=useForm()\n    // const submit=submission=>console.log(submission);\n\n    function handleEmail(event)\n    {   \n        event.preventDefault()\n       let value1=event.target.value;\n        return(setEmail(value1));\n    }\n\n    function handlePassword(event)\n    {\n        event.preventDefault()\n        let value2=event.target.value;\n        return(setPassword(value2));\n    }\n\n    function handleClick()\n    {\n     let finalEmail=email   \n     let finalPassword=password;\n  \n    let storedemail=JSON.parse(localStorage.getItem(\"email\"));\n    let storedpassword=JSON.parse(localStorage.getItem(\"password\"));\n   \n    if(finalEmail===storedemail && finalPassword===storedpassword)\n    {\n      localStorage.setItem(\"isLoggedIn\",JSON.stringify(1));\n      window.location.reload();\n    }    \n    }\n\n\n   return(<div>\n       <form>\n       <br/>\n      <br/>\n      <br/>\n      <h1>Login</h1>\n      <input type=\"text\" \n      {...register('email',{required:{value:true,message:\"Enter a email address\"},pattern: {value: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,message: \"Invalid email address\"}})\n      }\n      onChange={handleEmail} placeholder=\"Enter your email address\"/>\n      <br/>\n      {errors.email && (<span>{errors.email.message}</span>)}\n      <br/>\n      <br/>\n      <input type=\"password\" {...register('password',{required:{value:true,message:\"Enter a password\"},minLength:{value:8,message:\"Length should be of min 8 characters \"}\n      ,validate: (value) => {return ( [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every((pattern) => pattern.test(value)\n            ) || \"Password must include lower, upper, number, and special chars\"\n          );\n        }})} onChange={handlePassword} placeholder=\"Enter your password\"/>\n      <br/>\n      {errors.password && (<span>{errors.password.message}</span>)}\n      <br/>\n      \n      <br/>\n      <button type=\"submit\" onClick={handleSubmit(handleClick)} >Login</button>\n      </form>\n   </div>); \n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}